(window.webpackJsonp=window.webpackJsonp||[]).push([[9],{67:function(e,t,n){"use strict";n.r(t),n.d(t,"frontMatter",(function(){return r})),n.d(t,"metadata",(function(){return o})),n.d(t,"rightToc",(function(){return l})),n.d(t,"default",(function(){return d}));var a=n(2),s=n(6),i=(n(0),n(90)),r={},o={unversionedId:"home",id:"home",isDocsHomePage:!1,title:"home",description:"This is the home for dartros documentation",source:"@site/docs/home.md",slug:"/home",permalink:"/dartros/docs/home",editUrl:"https://github.com/TimWhiting/dartros/edit/master/docs/website/docs/home.md",version:"current",sidebar:"docsSidebar"},l=[{value:"Message Generation",id:"message-generation",children:[]},{value:"Feature Status",id:"feature-status",children:[{value:"Notes",id:"notes",children:[]}]}],c={rightToc:l};function d(e){var t=e.components,n=Object(s.a)(e,["components"]);return Object(i.b)("wrapper",Object(a.a)({},c,n,{components:t,mdxType:"MDXLayout"}),Object(i.b)("h1",{id:"this-is-the-home-for-dartros-documentation"},"This is the home for dartros documentation"),Object(i.b)("p",null,"For an API reference please visit ",Object(i.b)("a",Object(a.a)({parentName:"p"},{href:"https://pub.dev/dartros"}),"pub.dev")),Object(i.b)("p",null,"This is an experimental package and documentation. Everything is done in my spare time."),Object(i.b)("p",null,"I make no guarantees of maintainance or reliability of this package or documentation.\nUse at your own risk."),Object(i.b)("p",null,"It is an open-source project, so treat it as such. Feel free to make pull requests."),Object(i.b)("h2",{id:"message-generation"},"Message Generation"),Object(i.b)("p",null,"Message generation is implemented for dartros. You will need to clone ",Object(i.b)("a",Object(a.a)({parentName:"p"},{href:"https://github.com/TimWhiting/gendart"}),"this ROS package"),"\ninto your catkin workspace for messages to be generated. I'm not quite sure how to get this into the default ROS message generation pipeline, and not sure if it is stable or efficient enough yet to warrant that."),Object(i.b)("p",null,"Essentially the basics are to clone the gendart repository into your catkin workspace, and then run catkin_make. As long as some catkin package depends on message generation it should generate messages. I'm trying to remember if there was anything else I needed to make it work."),Object(i.b)("p",null,"The generated messages will be in the devel folder of your workspace more specifically: ",Object(i.b)("inlineCode",{parentName:"p"},"devel/share/gendart/ros/{name_of_msg_package}"),"."),Object(i.b)("p",null,"You can depend on this in your dart node via a path dependency.\nAssuming your dart node is in the src folder this would look like this:"),Object(i.b)("pre",null,Object(i.b)("code",Object(a.a)({parentName:"pre"},{className:"language-yaml"}),"# pubspec.yaml\ndependencies:\n  sensor_msgs:\n    path: ../../devel/share/gendart/ros/sensor_msgs\n")),Object(i.b)("p",null,"Then to use it to publish an image you might do something like this:"),Object(i.b)("pre",null,Object(i.b)("code",Object(a.a)({parentName:"pre"},{className:"language-dart"}),"import 'package:dartros/dartros.dart';\nimport 'package:dartx/dartx.dart';\nimport 'package:sensor_msgs/msgs.dart';\n\nFuture<void> main(List<String> args) async {\n  final node = await initNode('test_node', args);\n  final img_msg = Image(\n      header: null,\n      height: 600,\n      width: 1024,\n      encoding: 'rgba8',\n      is_bigendian: 0,\n      step: 1024 * 4,\n      data: List.generate(600 * 1024 * 4, (_) => 255));\n  final pub = node.advertise<Image>('/robot/head_display', Image.$prototype);\n  await Future.delayed(2.seconds);\n  while (true) {\n    pub.publish(img_msg, 1);\n    await Future.delayed(2.seconds);\n  }\n}\n")),Object(i.b)("p",null,"However, the following message packages are published to ",Object(i.b)("inlineCode",{parentName:"p"},"pub.dev")," for a better experience creating libraries around them, or they are part of the dartros implementation and therefore needed to be published to ",Object(i.b)("inlineCode",{parentName:"p"},"pub.dev"),":"),Object(i.b)("ul",null,Object(i.b)("li",{parentName:"ul"},"std_msgs"),Object(i.b)("li",{parentName:"ul"},"sensor_msgs"),Object(i.b)("li",{parentName:"ul"},"rosgraph_msgs"),Object(i.b)("li",{parentName:"ul"},"geometry_msgs"),Object(i.b)("li",{parentName:"ul"},"actionlib_msgs")),Object(i.b)("p",null,"Depend on them through a regular pub dependency to ensure no conflicts with the message versions."),Object(i.b)("h2",{id:"feature-status"},"Feature Status"),Object(i.b)("p",null,"At a high level the things that have been tested are:"),Object(i.b)("ul",null,Object(i.b)("li",{parentName:"ul"},"Publish and Subscribe (TCP)"),Object(i.b)("li",{parentName:"ul"},"Services"),Object(i.b)("li",{parentName:"ul"},"Message Generation for messages and services"),Object(i.b)("li",{parentName:"ul"},"Connecting to a ROS master that is not localhost")),Object(i.b)("p",null,"Not tested:"),Object(i.b)("ul",null,Object(i.b)("li",{parentName:"ul"},"Publish and Subscribe (UDP)")),Object(i.b)("p",null,"Still in the works:"),Object(i.b)("ul",null,Object(i.b)("li",{parentName:"ul"},"Actions and ActionServers, needs action message generation work, and then some updates to the action server implementation.")),Object(i.b)("h3",{id:"notes"},"Notes"),Object(i.b)("p",null,"Heavily inspired by the cpp and especially ",Object(i.b)("a",Object(a.a)({parentName:"p"},{href:"https://github.com/RethinkRobotics-opensource/rosnodejs"}),"nodejs")," implementation"),Object(i.b)("ul",null,Object(i.b)("li",{parentName:"ul"},"I did not directly use any of the nodejs source code since this is an implementation in a different language using different libraries.\nHowever, I want to make sure I attribute them properly, since a large portion of the code is structured similarly, and I used their\nimplementation as a reference. You can find their license included in the source code of this library.")))}d.isMDXComponent=!0}}]);